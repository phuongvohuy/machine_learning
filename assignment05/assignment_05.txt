The overall goal of the exercise is to get hands-on experience with the implementation of a popular machine learning scheme and to work on a real-world task. The task is to implement an improved version of the Naive Bayes algorithm that is able to predict the domain - one of Archaea, Bacteria, Eukaryota or Virus - from the abstract of research papers about proteins taken from the MEDLINE database. You will then apply your implementation on a test set without class labels and hand in the predictions of your implementation.

The challenge
The ultimate goal of this programming project is to come up with an implementation of a (possibly extended or modified) Naive Bayes algorithm, that achieves a high predictive accuracy on the test data. As a minimum requirement your implementation should be better than a vanilla-plain version of Naive Bayes as explained in the lecture or any standard textbook. Your algorithm should still be "Naive Bayes" in the sense that it makes the assumption that all attributes are conditionally independent of each other given the class. You might, however, change any other assumptions, representations or models in your implementation. Basically, there are two parts to be solved:

First of all, you need to decide about a suitable representation for the text in the abstract. An easy way to obtain an attribute-value representation is to identify the 1000 most frequently occurring words and generate 0-1 attributes stating whether or not the word occurs in the corresponding abstract. There are other possible representations, e.g. one could take the occurrence frequency of a word in the abstract into account.
The standard Naive Bayes algorithm as outlined for example in Mitchell's "Machine Learning" will probably yield comparably poor predictive accuracy, so you need to improve it in order to obtain good predictive accuracy.
Data
You will apply the Naive Bayes classifier on a data set containing the abstracts of research papers that deal with proteins. Each protein is found either in Archaea, Bacteria, Eukaryota, or Virus. The second attribute (class) in each record specifies the domain of the protein:

A: Archaea
B: Bacteria
E: Eucaryota
V: Virus
The third attribute (abstract) in the record is a character string containing the abstract to be classified. The string is preprocessed: it contains only whitespace, alphanumerical lowercase characters, digits, the dash (-) and the prime ('). Each contiguous sequence of non-whitespace characters framed by whitespace is considered a word.

The file trg.csv is the training set on which you have to train your Naive Bayes classifier. The file tst.csv is the test set (without the classes) for which you have to generate classifications and submit. The submitted file has to be in CSV format and have two columns, id and class. The first line should be  the header line with the column names. An example of how the submitted file has to be formatted the same way as s2nl.csv. Submissions that are not in this format will not be accepted for marking. Note that Canvas does not check the format, it is your responsibility to make sure it is in the right format.

What to submit
A pdf with a summary (max one page) that describes what you did to improve the prediction the name of the file has to be <your-upi>.pdf,
The submission file (see instructions above), the name of the file has to be <your-upi>.csv
You code in a .tar.gz packed archive, the name has to be code-<your-upi>.tar.gz
Pack all three files (the pdf, the csv, and the code tar.gz) into a file with the name submission-<your-upi>.tar.gz. Submissions that do not fulfill the requirements for the format and naming will not be considered. Note that Canvas attaches an identifier to re-submissions,  this is fine and expected.

You will be evaluated based on

the prediction performance of your classifier, relative to the null model that takes just just the majority class, relative to the standard Naive Bayes, and how you rank with respect to the other A5 submissions;
the implementation (code has to be clean, well-documented, and well-written),
the summary of your approach in the submitted pdf, and your selected extensions.
Rubric